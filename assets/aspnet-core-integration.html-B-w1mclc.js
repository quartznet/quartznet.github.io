import{_ as c,r as t,o as i,c as p,b as s,d as n,a,w as l,e as r}from"./app-Ba_ts8M_.js";const u={},d={href:"https://www.nuget.org/packages/Quartz.AspNetCore",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services",target:"_blank",rel:"noopener noreferrer"},m=r(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If you only need the generic host, <a href="hosted-services-integration">generic host integration</a> might suffice.</p></div><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>You need to add NuGet package reference to your project which uses Quartz.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Install-Package Quartz.AspNetCore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="using" tabindex="-1"><a class="header-anchor" href="#using"><span>Using</span></a></h2><p>You can add Quartz configuration by invoking an extension method <code>AddQuartzServer</code> on <code>IServiceCollection</code>. This will add a hosted Quartz server into ASP.NET Core process that will be started and stopped based on applications lifetime.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>See <a href="microsoft-di-integration">Quartz.Extensions.DependencyInjection documentation</a> to learn more about configuring Quartz scheduler, jobs and triggers.</p></div><p><strong>Example Startup.ConfigureServices configuration</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    services<span class="token punctuation">.</span><span class="token function">AddQuartz</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// base Quartz scheduler, job and trigger configuration</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ASP.NET Core hosting</span>
    services<span class="token punctuation">.</span><span class="token function">AddQuartzServer</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// when shutting down we want jobs to complete gracefully</span>
        options<span class="token punctuation">.</span>WaitForJobsToComplete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="a-practical-example-of-the-setup" tabindex="-1"><a class="header-anchor" href="#a-practical-example-of-the-setup"><span>A practical example of the setup</span></a></h2><p>In the code below you can see a real application of the Quartz package within ASP.NET Core MVC.</p><p>To better illustrate the use of the Quartz library, imagine you have a <code>Program.cs</code> file that is always created when you choose the MVC architecture, and then imagine a <code>Jobs</code> folder where you have all the tasks you want Quartz to perform in the background when you run your web application.</p><p>After that, it&#39;s pretty straightforward.</p><p>In the <code>Jobs</code> folder, you create a class that will perform the tasks you specify. The class should extend the <code>IJob</code> interface and implement the <code>Execute</code> method.</p><p><strong>Example SendEmailJob.cs configuration</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendEmailJob</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJob</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Code that sends a periodic email to the user (for example)</span>
        <span class="token comment">// Note: This method must always return a value </span>
        <span class="token comment">// This is especially important for trigger listers watching job execution </span>
        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After that, you just need to build Quartz trigger in <code>Program.cs</code>, which guarantees that the job will run according to the preset interval.</p><p><strong>Example Program.cs configuration</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddQuartz</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    q<span class="token punctuation">.</span><span class="token function">UseMicrosoftDependencyInjectionScopedJobFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Just use the name of your job that you created in the Jobs folder.</span>
    <span class="token class-name"><span class="token keyword">var</span></span> jobKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JobKey</span><span class="token punctuation">(</span><span class="token string">&quot;SendEmailJob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddJob</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SendEmailJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span> opts<span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    q<span class="token punctuation">.</span><span class="token function">AddTrigger</span><span class="token punctuation">(</span>opts <span class="token operator">=&gt;</span> opts
        <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;SendEmailJob-trigger&quot;</span><span class="token punctuation">)</span>
         <span class="token comment">//This Cron interval can be described as &quot;run every minute&quot; (when second is zero)</span>
        <span class="token punctuation">.</span><span class="token function">WithCronSchedule</span><span class="token punctuation">(</span><span class="token string">&quot;0 * * ? * *&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddQuartzHostedService</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>WaitForJobsToComplete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function v(h,g){const e=t("ExternalLinkIcon"),o=t("RouteLink");return i(),p("div",null,[s("p",null,[s("a",d,[n("Quartz.AspNetCore"),a(e)]),n(" provides integration with "),s("a",k,[n("ASP.NET Core hosted services"),a(e)]),n(".")]),m,s("p",null,[n("For more information on cron triggers and their format, you can use the tutorial directly from Quartz - "),a(o,{to:"/documentation/quartz-4.x/tutorial/crontriggers.html"},{default:l(()=>[n("Cron Triggers")]),_:1}),n(".")])])}const f=c(u,[["render",v],["__file","aspnet-core-integration.html.vue"]]),y=JSON.parse('{"path":"/documentation/quartz-4.x/packages/aspnet-core-integration.html","title":"ASP.NET Core Integration","lang":"en-US","frontmatter":{"title":"ASP.NET Core Integration"},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"Using","slug":"using","link":"#using","children":[]},{"level":2,"title":"A practical example of the setup","slug":"a-practical-example-of-the-setup","link":"#a-practical-example-of-the-setup","children":[]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-4.x/packages/aspnet-core-integration.md"}');export{f as comp,y as data};
