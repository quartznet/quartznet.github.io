import{_ as d,r as l,o as n,c as o,b as t,d as e,a,e as s}from"./app-Ba_ts8M_.js";const i={},u=s("<p>When using ADO.NET-based job store (the usual being <code>JobStoreTX</code>), Quartz requires the creation of a set of tables. Creating the initial schema or migrating existing one is a manual step, as Quartz.NET does not create or migrate these automatically.</p><table><thead><tr><th>Table</th><th>Brief Description</th></tr></thead><tbody><tr><td>qrtz_calendars</td><td>Stores non-standard calendars</td></tr><tr><td>qrtz_job_details</td><td>Stores <code>IJobDetail</code> data</td></tr><tr><td>qrtz_locks</td><td>locks used by quartz</td></tr><tr><td>qrtz_scheduler_state</td><td>stores <code>IScheduler</code> data</td></tr><tr><td>qrtz_triggers</td><td>Stores <code>ITrigger</code> data</td></tr><tr><td>qrtz_cron_triggers</td><td>Stores CRON trigger cron expression</td></tr><tr><td>qrtz_fired_triggers</td><td>triggers that are currently running</td></tr><tr><td>qrtz_blob_triggers</td><td>trigger table with a binary blob data storage</td></tr><tr><td>qrtz_simple_triggers</td><td>data for very simple repeat triggers</td></tr><tr><td>qrtz_simprop_triggers</td><td>Reusable table for custom triggers. Currently <code>ICalendarIntervalTrigger</code> and <code>IDailyTimeIntervalTrigger</code> use this</td></tr><tr><td>qrtz_paused_trigger_grps</td><td><code>IScheduler.PauseTriggers</code> data</td></tr></tbody></table>",2),c={href:"https://github.com/quartznet/quartznet/tree/main/database/tables",target:"_blank",rel:"noopener noreferrer"},g=t("h2",{id:"quartz-triggers-table",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#quartz-triggers-table"},[t("span",null,"Quartz Triggers Table")])],-1),h=t("p",null,[e("This table stores the configuration of the "),t("code",null,"ITrigger"),e(" data that is shared across all types.")],-1),b={href:"https://github.com/quartznet/quartznet/blob/main/src/Quartz/TriggerState.cs",target:"_blank",rel:"noopener noreferrer"},_=t("th",null,"Description",-1),m=t("tbody",null,[t("tr",null,[t("td",null,"Normal"),t("td",null,"trigger has fire times, and will do so on schedule")]),t("tr",null,[t("td",null,"Paused"),t("td",null,"paused and will not execute")]),t("tr",null,[t("td",null,"Complete"),t("td",null,'trigger will not fire again, it has no more "fire times"')]),t("tr",null,[t("td",null,"Error"),t("td",null,"the trigger had an error, it will not be fired again")]),t("tr",null,[t("td",null,"Blocked"),t("td",null,[e("this trigger is associated with a job that is "),t("code",null,"DisallowConcurrentExecutionAttribute"),e(" and so must wait, but the trigger would like to fire")])]),t("tr",null,[t("td",null,"None"),t("td",null,"the trigger doesn't exist")]),t("tr",null,[t("td",null,"Waiting"),t("td",null,"db only, and means the job is ready to be picked up")])],-1);function p(f,z){const r=l("ExternalLinkIcon");return n(),o("div",null,[u,t("p",null,[e("The scripts to create these tables for various providers can be found "),t("a",c,[e("here"),a(r)])]),g,h,t("table",null,[t("thead",null,[t("tr",null,[t("th",null,[t("a",b,[e("Trigger State"),a(r)])]),_])]),m])])}const T=d(i,[["render",p],["__file","index.html.vue"]]),x=JSON.parse('{"path":"/documentation/quartz-3.x/db/","title":"Database Schema","lang":"en-US","frontmatter":{"title":"Database Schema"},"headers":[{"level":2,"title":"Quartz Triggers Table","slug":"quartz-triggers-table","link":"#quartz-triggers-table","children":[]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-3.x/db/index.md"}');export{T as comp,x as data};
