import{_ as c,r as i,o as p,c as u,b as n,a as s,d as e,w as r,e as a}from"./app-Ba_ts8M_.js";const l={},d=a(`<h1 id="jobs-and-triggers" tabindex="-1"><a class="header-anchor" href="#jobs-and-triggers"><span>Jobs and Triggers</span></a></h1><p><strong>Jobs</strong> and <strong>Triggers</strong> will be the core tools that you use as a developer working with the Quartz library.</p><h2 id="jobs" tabindex="-1"><a class="header-anchor" href="#jobs"><span>Jobs</span></a></h2><p>A job is a class that implements the <code>IJob</code> interface, which has only one simple method:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">Quartz</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IJob</span>
    <span class="token punctuation">{</span>
        <span class="token return-type class-name">Task</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the job&#39;s trigger fires (more on that in a moment), the <code>Execute(..)</code> method is invoked by one of the scheduler&#39;s worker threads. The <code>JobExecutionContext</code> object that is passed to this method provides the job instance with information about its &quot;run-time&quot; environment - a handle to the <code>IScheduler</code> that executed it, a handle to the Trigger that triggered the execution, the job&#39;s <code>IJobDetail</code> object, and a few other items.</p><p>The <code>IJobDetail</code> object is created by the Quartz.NET client (your program) at the time the job is added to the scheduler. It contains various property settings for the job, as well as a <code>JobDataMap</code>, which can be used to store state information for a given instance of your job class. It is essentially the definition of the job instance, and is discussed in further detail in the next lesson.</p><h2 id="triggers" tabindex="-1"><a class="header-anchor" href="#triggers"><span>Triggers</span></a></h2><p>Trigger objects are used to trigger the execution (or &#39;firing&#39;) of jobs. When you wish to schedule a job, you instantiate a trigger and use its properties to configure the scheduling you wish to have. Triggers may also have a <code>JobDataMap</code> associated with them. - this is useful to passing parameters to a Job that are specific to the firings of the trigger. Quartz ships with a handful of different trigger types, but the most commonly used types are simple trigger (interface <code>ISimpleTrigger</code>) and a cron trigger (interface <code>ICronTrigger</code>).</p>`,9),h={class:"custom-container warning"},g=n("p",{class:"custom-container-title"},"WARNING",-1),b={href:"https://en.wikipedia.org/wiki/Cron",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"cron",-1),k=n("code",null,"CronTrigger",-1),f=n("a",{href:"/documentation/quartz-3.x/tutorial/crontrigger"},"More...",-1),v=a(`<p><strong>SimpleTrigger</strong> is handy if you need &#39;one-shot&#39; execution (just single execution of a job at a given moment in time), or if you need to fire a job at a given time, and have it repeat <code>N</code> times, with a delay of <code>T</code> between executions. This should feel similar to the .NET Timer class.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> example <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger-name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;trigger-group&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span><span class="token string">&quot;job-name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;job-group&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        o<span class="token punctuation">.</span><span class="token function">WithRepeatCount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithInterval</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),y=n("strong",null,"CronTrigger",-1),j={href:"http://www.cronmaker.com/",target:"_blank",rel:"noopener noreferrer"},w=a(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> example <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger-name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;trigger-group&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span><span class="token string">&quot;job-name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;job-group&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithCronSchedule</span><span class="token punctuation">(</span><span class="token string">&quot;45 23 * * 6&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="why-jobs-and-triggers" tabindex="-1"><a class="header-anchor" href="#why-jobs-and-triggers"><span>Why Jobs and Triggers?</span></a></h2><p>Many job schedulers do not have separate notions of jobs and triggers. Some define a &#39;job&#39; as simply an execution time (or schedule) along with some small job identifier. Others are much like the union of Quartz&#39;s job and trigger objects. While developing Quartz, we decided that it made sense to create a separation between the schedule and the work to be performed on that schedule. This has (in our opinion) many benefits.</p><p>For example, Jobs can be created and stored in the job scheduler independent of a trigger, and many triggers can be associated with the same job. Another benefit of this loose-coupling is the ability to configure jobs that remain in the scheduler after their associated triggers have expired, so that that it can be rescheduled later, without having to re-define it. It also allows you to modify or replace a trigger without having to re-define its associated job.</p><h2 id="identities" tabindex="-1"><a class="header-anchor" href="#identities"><span>Identities</span></a></h2><p>Jobs and Triggers are given identifying keys as they are registered with the Quartz scheduler. The keys of Jobs and Triggers (<code>JobKey</code> and <code>TriggerKey</code>) allow them to be placed into &#39;groups&#39; which can be useful for organizing your jobs and triggers into categories such as &quot;reporting jobs&quot; and &quot;maintenance jobs&quot;. The name portion of the key of a job or trigger must be unique within the group. The complete key (or identifier) of a job or trigger is the compound of the name and group.</p>`,6);function x(_,T){const t=i("ExternalLinkIcon"),o=i("RouteLink");return p(),u("div",null,[d,n("div",h,[g,n("p",null,[n("a",b,[m,s(t)]),e(" is the name of an early Linux command-line utility used to schedule jobs. It developed a specific way of describing how a job runs, however the "),k,e(" uses a different format where Quartz expects seconds as the first parameter. "),f])]),v,n("p",null,[y,e(' is useful if you wish to have triggering based on calendar-like schedules - such as "every Friday, at noon" or "at 10:15 on the 10th day of every month.". You can use '),n("a",j,[e("Cron Maker"),s(t)]),e(" to explore the syntax.")]),w,n("p",null,[e("You now have a general idea about what Jobs and Triggers are, you can learn more about them in "),s(o,{to:"/documentation/quartz-3.x/tutorial/more-about-jobs.html"},{default:r(()=>[e("Lesson 4: More About Jobs & JobDetails")]),_:1}),e(" and "),s(o,{to:"/documentation/quartz-3.x/tutorial/more-about-triggers.html"},{default:r(()=>[e("Lesson 5: More About Triggers")]),_:1})])])}const J=c(l,[["render",x],["__file","jobs-and-triggers.html.vue"]]),I=JSON.parse('{"path":"/documentation/quartz-3.x/tutorial/jobs-and-triggers.html","title":"Jobs And Triggers","lang":"en-US","frontmatter":{"title":"Jobs And Triggers"},"headers":[{"level":2,"title":"Jobs","slug":"jobs","link":"#jobs","children":[]},{"level":2,"title":"Triggers","slug":"triggers","link":"#triggers","children":[]},{"level":2,"title":"Why Jobs and Triggers?","slug":"why-jobs-and-triggers","link":"#why-jobs-and-triggers","children":[]},{"level":2,"title":"Identities","slug":"identities","link":"#identities","children":[]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-3.x/tutorial/jobs-and-triggers.md"}');export{J as comp,I as data};
