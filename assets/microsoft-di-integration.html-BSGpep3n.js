import{_ as c,r as e,o as i,c as u,b as n,d as s,a,w as l,e as o}from"./app-Ba_ts8M_.js";const r={},d={href:"https://www.nuget.org/packages/Quartz.Extensions.DependencyInjection",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection",target:"_blank",rel:"noopener noreferrer"},v=o(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Quartz 3.1 or later required.</p></div><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>You need to add NuGet package reference to your project which uses Quartz.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Install-Package Quartz.Extensions.DependencyInjection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="using" tabindex="-1"><a class="header-anchor" href="#using"><span>Using</span></a></h2><p>You can add Quartz configuration by invoking an extension method <code>AddQuartz</code> on <code>IServiceCollection</code>. The configuration building wraps various <a href="../configuration/reference">configuration properties</a> with strongly-typed API. You can also configure properties using standard .NET Core <code>appsettings.json</code> inside configuration section <code>Quartz</code>.</p>`,6),m={class:"custom-container tip"},b=n("p",{class:"custom-container-title"},"TIP",-1),g=n("code",null,"QuartzOptions",-1),f=n("code",null,"AddOptions",-1),h=n("code",null,"Configure",-1),y={href:"https://github.com/quartznet/quartznet/blob/a4511ef0703206cf483c6331d5b2ac7fb69d26d3/src/Quartz.Examples.AspNetCore/Startup.cs#L71",target:"_blank",rel:"noopener noreferrer"},q={class:"custom-container tip"},S=n("p",{class:"custom-container-title"},"TIP",-1),w=o(`<p><strong>Example appsettings.json</strong></p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;Logging&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;LogLevel&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;Default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Microsoft&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Warning&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Information&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;Quartz&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;quartz.scheduler.instanceName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Quartz ASP.NET Core Sample Scheduler&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="di-aware-job-factories" tabindex="-1"><a class="header-anchor" href="#di-aware-job-factories"><span>DI aware job factories</span></a></h2><p>Quartz comes with two built-in alternatives for job factory which can be configured via either calling <code>UseMicrosoftDependencyInjectionJobFactory</code> or <code>UseMicrosoftDependencyInjectionScopedJobFactory</code> (deprecated).</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>As of Quartz.NET 3.3.2 all jobs produced by the default job factory are scoped jobs, you should no longer use <code>UseMicrosoftDependencyInjectionJobFactory</code> or <code>UseMicrosoftDependencyInjectionScopedJobFactory</code>.</p></div><h3 id="job-instance-construction" tabindex="-1"><a class="header-anchor" href="#job-instance-construction"><span>Job instance construction</span></a></h3><p>By default Quartz will try to resolve job&#39;s type from container and if there&#39;s no explicit registration Quartz will use <code>ActivatorUtilities</code> to construct job and inject it&#39;s dependencies via constructor. Job should have only one public constructor.</p><h3 id="persistent-job-stores" tabindex="-1"><a class="header-anchor" href="#persistent-job-stores"><span>Persistent job stores</span></a></h3><p>The scheduling configuration will be checked against database and updated accordingly every time your application starts and schedule is being evaluated.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>When using persistent job store, make sure you define job and trigger names for your scheduling so that existence checks work correctly against the data you already have in your database.</p><p>Using API to configure triggers and jobs without explicit job identity configuration will cause jobs and triggers to have different generated name each time configuration is being evaluated.</p><p>With persistent job stores it&#39;s best practice to always declare at least job and trigger name. Omitting the group for them will produce same default group value for every invocation.</p></div><p><strong>Example Startup.ConfigureServices configuration</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// base configuration from appsettings.json</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>QuartzOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;Quartz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// if you are using persistent job store, you might want to alter some options</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>QuartzOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>Scheduling<span class="token punctuation">.</span>IgnoreDuplicates <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// default: false</span>
        options<span class="token punctuation">.</span>Scheduling<span class="token punctuation">.</span>OverWriteExistingData <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// default: true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    services<span class="token punctuation">.</span><span class="token function">AddQuartz</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// handy when part of cluster or you want to otherwise identify multiple schedulers</span>
        q<span class="token punctuation">.</span>SchedulerId <span class="token operator">=</span> <span class="token string">&quot;Scheduler-Core&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// we take this from appsettings.json, just show it&#39;s possible</span>
        <span class="token comment">// q.SchedulerName = &quot;Quartz ASP.NET Core Sample Scheduler&quot;;</span>

        <span class="token comment">// these are the defaults</span>
        q<span class="token punctuation">.</span><span class="token function">UseSimpleTypeLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">UseInMemoryStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">UseDefaultThreadPool</span><span class="token punctuation">(</span>tp <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            tp<span class="token punctuation">.</span>MaxConcurrency <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// quickest way to create a job with single trigger is to use ScheduleJob</span>
        <span class="token comment">// (requires version 3.2)</span>
        q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ScheduleJob</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ExampleJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>trigger <span class="token operator">=&gt;</span> trigger
            <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;Combined Configuration Trigger&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">StartAt</span><span class="token punctuation">(</span>DateBuilder<span class="token punctuation">.</span><span class="token function">EvenSecondDate</span><span class="token punctuation">(</span>DateTimeOffset<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithDailyTimeIntervalSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">WithInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> IntervalUnit<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithDescription</span><span class="token punctuation">(</span><span class="token string">&quot;my awesome trigger configured for a job with single call&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// you can also configure individual jobs and triggers with code</span>
        <span class="token comment">// this allows you to associated multiple triggers with same job</span>
        <span class="token comment">// (if you want to have different job data map per trigger for example)</span>
        q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddJob</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ExampleJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>j <span class="token operator">=&gt;</span> j
            <span class="token punctuation">.</span><span class="token function">StoreDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// we need to store durably if no trigger is associated</span>
            <span class="token punctuation">.</span><span class="token function">WithDescription</span><span class="token punctuation">(</span><span class="token string">&quot;my awesome job&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// here&#39;s a known job for triggers</span>
        <span class="token class-name"><span class="token keyword">var</span></span> jobKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JobKey</span><span class="token punctuation">(</span><span class="token string">&quot;awesome job&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;awesome group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddJob</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ExampleJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>jobKey<span class="token punctuation">,</span> j <span class="token operator">=&gt;</span> j
            <span class="token punctuation">.</span><span class="token function">WithDescription</span><span class="token punctuation">(</span><span class="token string">&quot;my awesome job&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        q<span class="token punctuation">.</span><span class="token function">AddTrigger</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t
            <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;Simple Trigger&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">StartNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">WithInterval</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithDescription</span><span class="token punctuation">(</span><span class="token string">&quot;my awesome simple trigger&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        q<span class="token punctuation">.</span><span class="token function">AddTrigger</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t
            <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;Cron Trigger&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">StartAt</span><span class="token punctuation">(</span>DateBuilder<span class="token punctuation">.</span><span class="token function">EvenSecondDate</span><span class="token punctuation">(</span>DateTimeOffset<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithCronSchedule</span><span class="token punctuation">(</span><span class="token string">&quot;0/3 * * * * ?&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithDescription</span><span class="token punctuation">(</span><span class="token string">&quot;my awesome cron trigger&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// you can add calendars too (requires version 3.2)</span>
        <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> calendarName <span class="token operator">=</span> <span class="token string">&quot;myHolidayCalendar&quot;</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddCalendar</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HolidayCalendar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
            <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> calendarName<span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">replace</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">updateTriggers</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">AddExcludedDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        q<span class="token punctuation">.</span><span class="token function">AddTrigger</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t
            <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;Daily Trigger&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">StartAt</span><span class="token punctuation">(</span>DateBuilder<span class="token punctuation">.</span><span class="token function">EvenSecondDate</span><span class="token punctuation">(</span>DateTimeOffset<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithDailyTimeIntervalSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">WithInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> IntervalUnit<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithDescription</span><span class="token punctuation">(</span><span class="token string">&quot;my awesome daily time interval trigger&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ModifiedByCalendar</span><span class="token punctuation">(</span>calendarName<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// also add XML configuration and poll it for changes</span>
        q<span class="token punctuation">.</span><span class="token function">UseXmlSchedulingConfiguration</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            x<span class="token punctuation">.</span>Files <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;~/quartz_jobs.config&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            x<span class="token punctuation">.</span>ScanInterval <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            x<span class="token punctuation">.</span>FailOnFileNotFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            x<span class="token punctuation">.</span>FailOnSchedulingError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// convert time zones using converter that can handle Windows/Linux differences</span>
        q<span class="token punctuation">.</span><span class="token function">UseTimeZoneConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// auto-interrupt long-running job</span>
        q<span class="token punctuation">.</span><span class="token function">UseJobAutoInterrupt</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// this is the default</span>
            options<span class="token punctuation">.</span>DefaultMaxRunTime <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ScheduleJob</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SlowJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
            triggerConfigurator <span class="token operator">=&gt;</span> triggerConfigurator
                <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;slowJobTrigger&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">StartNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">WithIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            jobConfigurator <span class="token operator">=&gt;</span> jobConfigurator
                <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;slowJob&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">UsingJobData</span><span class="token punctuation">(</span>JobInterruptMonitorPlugin<span class="token punctuation">.</span>JobDataMapKeyAutoInterruptable<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token comment">// allow only five seconds for this job, overriding default configuration</span>
                <span class="token punctuation">.</span><span class="token function">UsingJobData</span><span class="token punctuation">(</span>JobInterruptMonitorPlugin<span class="token punctuation">.</span>JobDataMapKeyMaxRunTime<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>TotalMilliseconds<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// add some listeners</span>
        q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSchedulerListener</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SampleSchedulerListener<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddJobListener</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SampleJobListener<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>GroupMatcher<span class="token operator">&lt;</span>JobKey<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">GroupEquals</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">.</span>Group<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTriggerListener</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SampleTriggerListener<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// example of persistent job store using JSON serializer as an example</span>
        <span class="token comment">/*
        q.UsePersistentStore(s =&gt;
        {
            s.PerformSchemaValidation = true; // default
            s.UseProperties = true; // preferred, but not default
            s.RetryInterval = TimeSpan.FromSeconds(15);
            s.UseSqlServer(sqlServer =&gt;
            {
                sqlServer.ConnectionString = &quot;some connection string&quot;;
                // this is the default
                sqlServer.TablePrefix = &quot;QRTZ_&quot;;
            });
            s.UseJsonSerializer();
            s.UseClustering(c =&gt;
            {
                c.CheckinMisfireThreshold = TimeSpan.FromSeconds(20);
                c.CheckinInterval = TimeSpan.FromSeconds(10);
            });
        });
        */</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// we can use options pattern to support hooking your own configuration</span>
 <span class="token comment">// because we don&#39;t use service registration api,</span>
 <span class="token comment">// we need to manually ensure the job is present in DI</span>
 services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ExampleJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SampleOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;Sample&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddOptions</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>QuartzOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IOptions<span class="token punctuation">&lt;</span>SampleOptions<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> dep<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>dep<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>CronSchedule<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> jobKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JobKey</span><span class="token punctuation">(</span><span class="token string">&quot;options-custom-job&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;custom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddJob</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ExampleJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>j <span class="token operator">=&gt;</span> j<span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span><span class="token function">AddTrigger</span><span class="token punctuation">(</span>trigger <span class="token operator">=&gt;</span> trigger
     <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;options-custom-trigger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;custom&quot;</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">WithCronSchedule</span><span class="token punctuation">(</span>dep<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>CronSchedule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Quartz.Extensions.Hosting allows you to fire background service that handles scheduler lifecycle</span>
    services<span class="token punctuation">.</span><span class="token function">AddQuartzHostedService</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// when shutting down we want jobs to complete gracefully</span>
        options<span class="token punctuation">.</span>WaitForJobsToComplete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function j(I,x){const t=e("ExternalLinkIcon"),p=e("RouteLink");return i(),u("div",null,[n("p",null,[n("a",d,[s("Quartz.Extensions.DependencyInjection"),a(t)]),s(" provides integration with "),n("a",k,[s("Microsoft Dependency Injection"),a(t)]),s(".")]),v,n("div",m,[b,n("p",null,[s("The section should be bound manually to "),g,s(" type with "),f,s(" or "),h,s(" as in "),n("a",y,[s("this example"),a(t)]),s(".")])]),n("div",q,[S,n("p",null,[a(p,{to:"/documentation/quartz-3.x/packages/hosted-services-integration.html"},{default:l(()=>[s("Quartz.Extensions.Hosting")]),_:1}),s(" allows you to have a background service for your application that handles starting and stopping the scheduler.")])]),w])}const _=c(r,[["render",j],["__file","microsoft-di-integration.html.vue"]]),D=JSON.parse('{"path":"/documentation/quartz-3.x/packages/microsoft-di-integration.html","title":"Microsoft DI Integration","lang":"en-US","frontmatter":{"title":"Microsoft DI Integration"},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"Using","slug":"using","link":"#using","children":[]},{"level":2,"title":"DI aware job factories","slug":"di-aware-job-factories","link":"#di-aware-job-factories","children":[{"level":3,"title":"Job instance construction","slug":"job-instance-construction","link":"#job-instance-construction","children":[]},{"level":3,"title":"Persistent job stores","slug":"persistent-job-stores","link":"#persistent-job-stores","children":[]}]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-3.x/packages/microsoft-di-integration.md"}');export{_ as comp,D as data};
