import{_ as r,r as t,o as l,c,b as e,d as a,a as n,w as p,e as o}from"./app-Ba_ts8M_.js";const u={},d={href:"https://raw.github.com/quartznet/quartznet/master/changelog.md",target:"_blank",rel:"noopener noreferrer"},h={class:"custom-container tip"},g=e("p",{class:"custom-container-title"},"TIP",-1),m=e("p",null,"Quartz jumped to async/await world and added support for .NET Core with 3.0 release so most significant changes can be found on APIs and functionality available depending on whether you target full .NET Framework or the .NET Core.",-1),k=e("h2",{id:"packaging-changes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#packaging-changes"},[e("span",null,"Packaging changes")])],-1),b=e("p",null,"Quartz NuGet package was split to more specific packages.",-1),v={href:"https://www.nuget.org/packages/Quartz.Jobs",target:"_blank",rel:"noopener noreferrer"},f=e("ul",null,[e("li",null,"DirectoryScanJob"),e("li",null,"FileScanJob"),e("li",null,"NativeJob"),e("li",null,"SendMailJob")],-1),y={href:"https://www.nuget.org/packages/Quartz.Plugins",target:"_blank",rel:"noopener noreferrer"},w=e("ul",null,[e("li",null,"XMLSchedulingDataProcessorPlugin")],-1),_=o(`<p>Check that you reference the required NuGet packages and that your configuration references also the correct assembly.</p><h3 id="database-schema-changes" tabindex="-1"><a class="header-anchor" href="#database-schema-changes"><span>Database schema changes</span></a></h3><p>2.6 schema should work with 3.0 with no changes.</p><h3 id="migrating-holidaycalendar-binary-format" tabindex="-1"><a class="header-anchor" href="#migrating-holidaycalendar-binary-format"><span>Migrating HolidayCalendar binary format</span></a></h3><p>If you have <code>HolidayCalendar</code>s stored in database in binary format (just stored with AdoJobStore). You need to first load them with Quartz 2.4 or later 2.x version and then re-store them. This will make the serialization use format that is not dependent on presence of C5 library.</p><h3 id="thread-pool-changes" tabindex="-1"><a class="header-anchor" href="#thread-pool-changes"><span>Thread pool changes</span></a></h3><ul><li><code>SimpleThreadPool</code> was removed altogether and it&#39;s now a synonym for <code>DefaultThreadPool</code></li><li>Jobs are now ran in CLR thread pool</li><li><code>ThreadCount</code> parameter still limits how many items will be queued at most to CLR thread pool</li><li>Thread priority is no longer supported, you need to remove <code>threadPriority</code> parameter</li></ul><h3 id="api-changes" tabindex="-1"><a class="header-anchor" href="#api-changes"><span>API Changes</span></a></h3><p>Scheduler and job API methods now are based on Tasks. This reflects how you define your jobs and operate with scheduler.</p><h4 id="scheduler" tabindex="-1"><a class="header-anchor" href="#scheduler"><span>Scheduler</span></a></h4><p>You now need to make sure that you have proper awaits in place when you operate with the scheduler:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// operating with scheduler is now Task-based and requires appropriate awaits</span>
<span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">waitForJobsToComplete</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jobs" tabindex="-1"><a class="header-anchor" href="#jobs"><span>Jobs</span></a></h4><p>Job&#39;s Execute method now returns a Task and can easily contain async code:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Jobs now return tasks from their Execute methods</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJob</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJob</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// dummy 1ms sleep</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you don&#39;t have any async&#39;ness in your job, you can just return <code>Task.CompletedTask</code> at the end of Execute method (available from .NET 4.6 onwards).</p><h5 id="iinterruptablejob" tabindex="-1"><a class="header-anchor" href="#iinterruptablejob"><span>IInterruptableJob</span></a></h5><p><code>IInterruptableJob</code> interface has been removed. You need to check for <code>IJobExecutionContext</code>&#39;s<code>CancellationToken.IsCancellationRequested</code> to determine whether job interruption has been requested.</p><h5 id="istatefuljob" tabindex="-1"><a class="header-anchor" href="#istatefuljob"><span>IStatefulJob</span></a></h5><p><code>IStatefulJob</code> interface that was obsoleted in 2.x has been removed, you should use <code>DisallowConcurrentExecution</code> and <code>PersistJobDataAfterExecution</code> attributes to achieve your goal.</p><h4 id="other-apis" tabindex="-1"><a class="header-anchor" href="#other-apis"><span>Other APIs</span></a></h4><p>If you have created custom implementations of services used by Quartz, you&#39;re going to need to adapt your code to be async-based.</p><h3 id="job-store-serialization-configuration-changes" tabindex="-1"><a class="header-anchor" href="#job-store-serialization-configuration-changes"><span>Job store serialization configuration changes</span></a></h3><p>You need to now explicitly state whether you want to use binary or json serialization if you are using persistent job store (AdoJobStore) when you configure your scheduler.</p><ul><li>For existing setups you should use the old binary serialization to ensure things work like before (see <a href="packages/system-text-json">Quartz.Serialization.SystemTextJson documentation</a> for migration path)</li><li>For new projects the JSON serialization is recommended as it should be marginally faster and more robust as it&#39;s not dealing with binary versioning issues</li><li>JSON is more secure and generally the way to use moving forward</li></ul>`,25),z={href:"https://www.nuget.org/packages/Quartz.Serialization.SystemTextJson/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.nuget.org/packages/Quartz.Serialization.Json/",target:"_blank",rel:"noopener noreferrer"},x=o(`<p>Configuring binary serialization strategy:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NameValueCollection</span>
<span class="token punctuation">{</span>
 <span class="token punctuation">[</span><span class="token string">&quot;quartz.jobStore.type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Quartz.Impl.AdoJobStore.JobStoreTX, Quartz&quot;</span><span class="token punctuation">,</span>
 <span class="token comment">// &quot;binary&quot; is alias for &quot;Quartz.Simpl.BinaryObjectSerializer, Quartz&quot;</span>
 <span class="token punctuation">[</span><span class="token string">&quot;quartz.serializer.type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;binary&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">ISchedulerFactory</span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StdSchedulerFactory</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configuring JSON serialization strategy (recommended):</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NameValueCollection</span>
<span class="token punctuation">{</span>
 <span class="token punctuation">[</span><span class="token string">&quot;quartz.jobStore.type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Quartz.Impl.AdoJobStore.JobStoreTX, Quartz&quot;</span><span class="token punctuation">,</span>
 <span class="token comment">// &quot;newtonsoft&quot; and &quot;json&quot; are aliases for &quot;Quartz.Simpl.JsonObjectSerializer, Quartz.Serialization.Json&quot;</span>
 <span class="token comment">// you should prefer &quot;newtonsoft&quot; as it&#39;s more explicit from Quartz 3.10 onwards</span>
 <span class="token punctuation">[</span><span class="token string">&quot;quartz.serializer.type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;newtonsoft&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">ISchedulerFactory</span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StdSchedulerFactory</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="simplified-job-store-provider-names" tabindex="-1"><a class="header-anchor" href="#simplified-job-store-provider-names"><span>Simplified job store provider names</span></a></h2><p>ADO.NET provider names have been simplified, the provider names are without version, e.g. <code>SqlServer-20</code> =&gt; <code>SqlServer</code>. They are now bound to whatever version that can be loaded.</p><h3 id="c5-collections" tabindex="-1"><a class="header-anchor" href="#c5-collections"><span>C5 Collections</span></a></h3><p>C5 Collections are no longer ILMerged inside Quartz, .NET 4.5 offers the needed collections.</p><h3 id="logging" tabindex="-1"><a class="header-anchor" href="#logging"><span>Logging</span></a></h3>`,9),q={href:"https://github.com/damianh/LibLog",target:"_blank",rel:"noopener noreferrer"},J=e("h3",{id:"remoting",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#remoting"},[e("span",null,"Remoting")])],-1),j=e("p",null,"Remoting is currently only supported when running on full framework version.",-1);function T(C,I){const s=t("ExternalLinkIcon"),i=t("RouteLink");return l(),c("div",null,[e("p",null,[e("em",null,[a("This document outlines changes needed per version upgrade basis. You need to check the steps for each version you are jumping over. You should also check "),e("a",d,[a("the complete change log"),n(s)]),a(".")])]),e("div",h,[g,e("p",null,[a("If you are a new user starting with the latest version, you don't need to follow this guide. Just jump right to "),n(i,{to:"/documentation/quartz-3.x/tutorial/"},{default:p(()=>[a("the tutorial")]),_:1})])]),m,k,b,e("ul",null,[e("li",null,[e("a",v,[a("Quartz.Jobs"),n(s)]),a(" is now a separate NuGet dependency you might need "),f]),e("li",null,[e("a",y,[a("Quartz.Plugins"),n(s)]),a(" is now a separate NuGet dependency you might need "),w])]),_,e("p",null,[a("If you choose to go with JSON serialization, remember to add NuGet package reference to either "),e("strong",null,[e("a",z,[a("Quartz.Serialization.SystemTextJson"),n(s)])]),a(" or "),e("strong",null,[e("a",S,[a("Quartz.Serialization.Json"),n(s)])]),a(" to your project.")]),x,e("p",null,[a("Common.Logging has been replaced with "),e("a",q,[a("LibLog"),n(s)]),a(" to reduce dependencies to none. LibLog should automatically detect your logging framework of choice if it's supported.")]),J,j])}const Q=r(u,[["render",T],["__file","migration-guide.html.vue"]]),E=JSON.parse('{"path":"/documentation/quartz-3.x/migration-guide.html","title":"Migration Guide","lang":"en-US","frontmatter":{"title":"Migration Guide"},"headers":[{"level":2,"title":"Packaging changes","slug":"packaging-changes","link":"#packaging-changes","children":[{"level":3,"title":"Database schema changes","slug":"database-schema-changes","link":"#database-schema-changes","children":[]},{"level":3,"title":"Migrating HolidayCalendar binary format","slug":"migrating-holidaycalendar-binary-format","link":"#migrating-holidaycalendar-binary-format","children":[]},{"level":3,"title":"Thread pool changes","slug":"thread-pool-changes","link":"#thread-pool-changes","children":[]},{"level":3,"title":"API Changes","slug":"api-changes","link":"#api-changes","children":[]},{"level":3,"title":"Job store serialization configuration changes","slug":"job-store-serialization-configuration-changes","link":"#job-store-serialization-configuration-changes","children":[]}]},{"level":2,"title":"Simplified job store provider names","slug":"simplified-job-store-provider-names","link":"#simplified-job-store-provider-names","children":[{"level":3,"title":"C5 Collections","slug":"c5-collections","link":"#c5-collections","children":[]},{"level":3,"title":"Logging","slug":"logging","link":"#logging","children":[]},{"level":3,"title":"Remoting","slug":"remoting","link":"#remoting","children":[]}]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-3.x/migration-guide.md"}');export{Q as comp,E as data};
