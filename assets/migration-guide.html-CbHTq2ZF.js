import{_ as c,r as o,o as l,c as r,b as e,d as n,a,w as p,e as t}from"./app-Ba_ts8M_.js";const u={},d={href:"https://raw.github.com/quartznet/quartznet/master/changelog.md",target:"_blank",rel:"noopener noreferrer"},g={class:"custom-container tip"},h=e("p",{class:"custom-container-title"},"TIP",-1),m=t(`<h2 id="migrating-from-version-3-x-to-4-x" tabindex="-1"><a class="header-anchor" href="#migrating-from-version-3-x-to-4-x"><span>Migrating from Version 3.x to 4.x</span></a></h2><h3 id="tasks-changed-to-valuetask" tabindex="-1"><a class="header-anchor" href="#tasks-changed-to-valuetask"><span>Tasks changed to ValueTask</span></a></h3><p>In a majority of interfaces that previously returned or took a <code>Task</code> or <code>Task&lt;T&gt;</code> parameter, have been changed to a <code>ValueTask</code> or <code>ValueTask&lt;T&gt;</code></p><p>In most cases, all you will need to do is adjust the signature from a <code>Task</code> to be a <code>ValueTask</code></p><p>::: info Note the following restrictions when working with ValueTask: :::</p><blockquote><p>The following operations should never be performed on a <code>ValueTask&lt;TResult&gt;</code> instance:</p><ul><li>Awaiting the instance multiple times.</li><li>Calling AsTask multiple times.</li><li>Using <code>.Result</code> or <code>.GetAwaiter().GetResult()</code> when the operation hasn&#39;t yet completed, or using them multiple times.</li><li>Using more than one of these techniques to consume the instance.</li></ul></blockquote><p>For example, to migrate jobs:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>becomes:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),k=e("code",null,"ValueTasks",-1),v={href:"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask-1?view=net-7.0",target:"_blank",rel:"noopener noreferrer"},f=t(`<h3 id="logging" tabindex="-1"><a class="header-anchor" href="#logging"><span>Logging</span></a></h3><p>LibLog has been replaced with the Microsoft.Logging.Abstraction library. Reconfigure logging using a ILoggerFactory, an example, with a Microsoft.Logging.SimpleConsole logger:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> loggerFactory <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>builder <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        builder
            <span class="token punctuation">.</span><span class="token function">SetMinimumLevel</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>Debug<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddSimpleConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LogProvider<span class="token punctuation">.</span><span class="token function">SetLogProvider</span><span class="token punctuation">(</span>loggerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b={href:"https://serilog.net/",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>An alternative approach is to configure the LoggerFactory via a HostBuilder ConfigureServices wire-up:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostContext<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
  services<span class="token punctuation">.</span><span class="token function">AddQuartz</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
          q<span class="token punctuation">.</span><span class="token function">SetLoggerFactory</span><span class="token punctuation">(</span>loggerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),_={href:"https://docs.microsoft.com/en-us/dotnet/core/extensions/logging?tabs=command-line",target:"_blank",rel:"noopener noreferrer"},w=t('<h3 id="json-serialization" tabindex="-1"><a class="header-anchor" href="#json-serialization"><span>JSON Serialization</span></a></h3><p>To configure JSON serialization to be used in job store instead of old <code>UseJsonSerializer</code> you should now use either <code>UseSystemTextJsonSerializer</code> or <code>UseNewtonsoftJsonSerializer</code> and remove the old package reference <code>Quartz.Serialization.Json</code> (and if Newtonsoft used, reference <code>Quartz.Serialization.Newtonsoft</code>). Change was made to distinguish the two common serializers that are being used (System.Text.Json and JSON.NET).</p>',2);function y(T,S){const s=o("ExternalLinkIcon"),i=o("RouteLink");return l(),r("div",null,[e("p",null,[e("em",null,[n("This document outlines changes needed per version upgrade basis. You need to check the steps for each version you are jumping over. You should also check "),e("a",d,[n("the complete change log"),a(s)]),n(".")])]),e("div",g,[h,e("p",null,[n("If you are a new user starting with the latest version, you don't need to follow this guide. Just jump right to "),a(i,{to:"/documentation/quartz-4.x/tutorial/"},{default:p(()=>[n("the tutorial")]),_:1})])]),m,e("p",null,[n("For more information on "),k,n(" please see "),e("a",v,[n("Microsoft"),a(s)])]),f,e("p",null,[n("See the Quartz.Examples project for examples on setting up "),e("a",b,[n("Serilog"),a(s)]),n(" and Microsoft.Logging with Quartz.")]),x,e("p",null,[n("Further information on configuring Microsoft.Logging can be found "),e("a",_,[n("at Microsoft docs"),a(s)])]),w])}const L=c(u,[["render",y],["__file","migration-guide.html.vue"]]),V=JSON.parse('{"path":"/documentation/quartz-4.x/migration-guide.html","title":"Migration Guide","lang":"en-US","frontmatter":{"title":"Migration Guide"},"headers":[{"level":2,"title":"Migrating from Version 3.x to 4.x","slug":"migrating-from-version-3-x-to-4-x","link":"#migrating-from-version-3-x-to-4-x","children":[{"level":3,"title":"Tasks changed to ValueTask","slug":"tasks-changed-to-valuetask","link":"#tasks-changed-to-valuetask","children":[]},{"level":3,"title":"Logging","slug":"logging","link":"#logging","children":[]},{"level":3,"title":"JSON Serialization","slug":"json-serialization","link":"#json-serialization","children":[]}]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-4.x/migration-guide.md"}');export{L as comp,V as data};
