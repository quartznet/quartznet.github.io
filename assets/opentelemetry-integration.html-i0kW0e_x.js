import{_ as o,r as i,o as p,c as r,b as n,d as a,a as s,e as t}from"./app-Ba_ts8M_.js";const l={},c={href:"https://www.nuget.org/packages/Quartz.OpenTelemetry.Instrumentation",target:"_blank",rel:"noopener noreferrer"},u={href:"https://opentelemetry.io/",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Quartz 3.1 or later required.</p></div><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>The integration library can still live a bit and thus integration API can have breaking changes and change behavior.</p></div><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>You need to add NuGet package reference to your project which uses Quartz.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Install-Package Quartz.OpenTelemetry.Instrumentation
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It also makes sense to install package for exporter to actually get the results somewhere.</p><h2 id="using" tabindex="-1"><a class="header-anchor" href="#using"><span>Using</span></a></h2><p>You can add Quartz configuration by invoking an extension method <code>AddQuartzInstrumentation</code> on <code>TracerProviderBuilder</code>.</p>`,8),m={href:"https://www.jaegertracing.io/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.nuget.org/packages/OpenTelemetry.Extensions.Hosting",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.nuget.org/packages/OpenTelemetry.Exporter.Jaeger",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>You can run local Jaeger via docker using:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> jaeger <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">COLLECTOR_ZIPKIN_HTTP_PORT</span><span class="token operator">=</span><span class="token number">9411</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">5775</span>:5775/udp <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">6831</span>:6831/udp <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">6832</span>:6832/udp <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">5778</span>:5778 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">16686</span>:16686 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">14268</span>:14268 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">14250</span>:14250 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">9411</span>:9411 <span class="token punctuation">\\</span>
  jaegertracing/all-in-one:1.18
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Example Startup.ConfigureServices configuration</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// make sure you configure logging and open telemetry before Quartz services</span>

    services<span class="token punctuation">.</span><span class="token function">AddOpenTelemetry</span><span class="token punctuation">(</span>builder <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        builder
            <span class="token punctuation">.</span><span class="token function">AddQuartzInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">UseJaegerExporter</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                o<span class="token punctuation">.</span>ServiceName <span class="token operator">=</span> <span class="token string">&quot;My Software Name&quot;</span><span class="token punctuation">;</span>

                <span class="token comment">// these are the defaults</span>
                o<span class="token punctuation">.</span>AgentHost <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
                o<span class="token punctuation">.</span>AgentPort <span class="token operator">=</span> <span class="token number">6831</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function b(h,f){const e=i("ExternalLinkIcon");return p(),r("div",null,[n("p",null,[n("a",c,[a("Quartz.OpenTelemetry.Instrumentation"),s(e)]),a(" provides integration with "),n("a",u,[a("OpenTelemetry"),s(e)]),a(".")]),d,n("p",null,[a("In the next example we will integrate with "),n("a",m,[a("Jaeger"),s(e)]),a(". We expect that you have also installed dependencies:")]),n("ul",null,[n("li",null,[n("a",v,[a("OpenTelemetry.Extensions.Hosting"),s(e)])]),n("li",null,[n("a",k,[a("OpenTelemetry.Exporter.Jaeger"),s(e)])])]),g])}const y=o(l,[["render",b],["__file","opentelemetry-integration.html.vue"]]),x=JSON.parse('{"path":"/documentation/quartz-4.x/packages/opentelemetry-integration.html","title":"OpenTelemetry Integration","lang":"en-US","frontmatter":{"title":"OpenTelemetry Integration"},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"Using","slug":"using","link":"#using","children":[]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-4.x/packages/opentelemetry-integration.md"}');export{y as comp,x as data};
