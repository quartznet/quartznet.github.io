import{_ as t,r as o,o as c,c as i,b as e,d as n,a as p,w as l,e as s}from"./app-Ba_ts8M_.js";const u={},d=s('<h1 id="the-quartz-api" tabindex="-1"><a class="header-anchor" href="#the-quartz-api"><span>The Quartz API</span></a></h1><p>The key interfaces and classes of the Quartz API are:</p><table><thead><tr><th>Type</th><th></th></tr></thead><tbody><tr><td><code>IScheduler</code></td><td>the main API for interacting with the scheduler</td></tr><tr><td><code>IJob</code></td><td>an interface to be implemented by components that you wish to have executed by the scheduler</td></tr><tr><td><code>IJobDetail</code></td><td>used to define instances of Jobs</td></tr><tr><td><code>ITrigger</code></td><td>a component that defines the schedule upon which a given Job will be executed, job can have multiple associated triggers</td></tr><tr><td><code>JobBuilder</code></td><td>used to define/build JobDetail instances, which define instances of Jobs</td></tr><tr><td><code>TriggerBuilder</code></td><td>used to define/build Trigger instances</td></tr><tr><td><code>SchedulerBuilder</code></td><td>used to define/build scheduler instances, requires Quartz 3.1 or later</td></tr></tbody></table><p>In this tutorial for readability&#39;s sake following terms are used interchangeably: <code>IScheduler</code> and <code>Scheduler</code>, <code>IJob</code> and <code>Job</code>, <code>IJobDetail</code> and <code>JobDetail</code>, <code>ITrigger</code> and <code>Trigger</code>.</p>',4),r=e("code",null,"Scheduler",-1),h=e("code",null,"SchedulerFactory",-1),k=e("code",null,"Shutdown()",-1),m=e("code",null,"IScheduler",-1),b=e("code",null,"Start()",-1),v=s(`<p>Quartz provides &quot;builder&quot; classes that define a Domain Specific Language (or DSL, also sometimes referred to as a &quot;fluent interface&quot;). In the previous lesson you saw an example of it, which we present a portion of here again:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// define the job and tie it to our HelloJob class</span>
<span class="token class-name">IJobDetail</span> job <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HelloJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;myJob&quot;</span><span class="token punctuation">,</span> <span class="token keyword">group</span><span class="token punctuation">:</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token comment">// Trigger the job to run now, and then every 40 seconds</span>
<span class="token class-name">ITrigger</span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;myTrigger&quot;</span><span class="token punctuation">,</span> <span class="token keyword">group</span><span class="token punctuation">:</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">StartNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x
        <span class="token punctuation">.</span><span class="token function">WithIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> sched <span class="token operator">=</span> scheduleFactory<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Tell Quartz to schedule the job using our trigger</span>
<span class="token keyword">await</span> sched<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The block of code that builds the job definition is using <code>JobBuilder</code> to create the <code>IJobDetail</code>. Likewise, the block of code that builds the trigger is using <code>TriggerBuilder</code>&#39;s fluent interface to the trigger.</p><p>Possible schedule extension methods are:</p><ul><li><code>WithCalendarIntervalSchedule</code></li><li><code>WithCronSchedule</code></li><li><code>WithDailyTimeIntervalSchedule</code></li><li><code>WithSimpleSchedule</code></li></ul><p>The <code>DateBuilder</code> type contains various methods for easily constructing <code>DateTimeOffset</code> instances for particular points in time (such as a date that represents the next even hour â€” for example, 10:00:00 if it is currently 9:43:27).</p>`,6);function g(f,y){const a=o("RouteLink");return c(),i("div",null,[d,e("p",null,[n("A "),r,n("'s life-cycle is bounded by its creation via a "),h,n(", and a call to its "),k,n(" method. Once created, the "),m,n(" interface can be used to add, remove, list Jobs and Triggers, and perform other scheduling-related operations (such as pausing a trigger). However, the Scheduler will not actually act on any triggers (execute jobs) until it has been started with the "),b,n(" method, as shown in "),p(a,{to:"/documentation/quartz-3.x/tutorial/using-quartz.html"},{default:l(()=>[n("Lesson 1")]),_:1}),n(".")]),v])}const _=t(u,[["render",g],["__file","overview.html.vue"]]),S=JSON.parse('{"path":"/documentation/quartz-3.x/tutorial/overview.html","title":"Library Overview","lang":"en-US","frontmatter":{"title":"Library Overview"},"headers":[],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-3.x/tutorial/overview.md"}');export{_ as comp,S as data};
