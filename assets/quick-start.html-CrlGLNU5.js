import{_ as p,r as a,o as i,c,b as s,d as n,a as t,w as l,e as u}from"./app-Ba_ts8M_.js";const r={},d=u(`<p>Welcome to the Quick Start Guide for Quartz.NET. As you read this guide, expect to see details of:</p><ul><li>Downloading Quartz.NET</li><li>Installing Quartz.NET</li><li>Configuring Quartz to your own particular needs</li><li>Starting a sample application</li></ul><h2 id="download-and-install" tabindex="-1"><a class="header-anchor" href="#download-and-install"><span>Download and Install</span></a></h2><p>You can either download the zip file or use the NuGet package. NuGet package contains only the binaries needed to run Quartz.NET, zip file comes with source code, samples and Quartz.NET server sample application.</p><h2 id="nuget-package" tabindex="-1"><a class="header-anchor" href="#nuget-package"><span>NuGet Package</span></a></h2><p>Couldn&#39;t get any simpler than this. Just fire up Visual Studio (with NuGet installed) and add reference to package <strong>Quartz</strong> from package manager extension:</p><ul><li>Right-click on your project&#39;s References and choose <strong>Manage NuGet Packages...</strong></li><li>Choose <strong>Online</strong> category from the left</li><li>Enter <strong>Quartz</strong> to the top right search and hit enter</li><li>Choose <strong>Quartz.NET</strong> from search results and hit install</li><li>Done!</li></ul><p>or from NuGet Command-Line:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Install-Package Quartz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you want to add JSON Serialization, just add the <a href="packages/json-serialization">Quartz.Serialization.Json</a> package the same way.</p><h3 id="zip-archive" tabindex="-1"><a class="header-anchor" href="#zip-archive"><span>Zip Archive</span></a></h3><p><strong>Short version</strong>: Once you&#39;ve downloaded Quartz.NET, unzip it, get the <code>Quartz.dll</code> from bin directory and start to use it.</p><p>Quartz core library does not have any hard binary dependencies. You can opt-in to more dependencies when you choose to use JSON serialization package, which requires JSON.NET. You need to have at least <code>Quartz.dll</code> beside your app binaries to successfully run Quartz.NET. So just add it as a references to your Visual Studio project that uses them. You can find these dlls from extracted archive from path <strong>bin\\your-target-framework-version\\release\\Quartz</strong>.</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>This is the big bit! Quartz.NET is a very configurable library. There are two main ways (which are not mutually exclusive) to supply Quartz.NET configuration information:</p><h3 id="fluent-scheduler-builder-api" tabindex="-1"><a class="header-anchor" href="#fluent-scheduler-builder-api"><span>Fluent Scheduler Builder API</span></a></h3><p>You can configure scheduler using C# fluent API, or via providing <code>NameValueCollection</code> parameter to scheduler factory which contains configuration keys and values.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// you can have base properties</span>
<span class="token class-name"><span class="token keyword">var</span></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NameValueCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// and override values via builder</span>
<span class="token class-name">IScheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">await</span> SchedulerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span>
    <span class="token comment">// default max concurrency is 10</span>
    <span class="token punctuation">.</span><span class="token function">UseDefaultThreadPool</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>MaxConcurrency <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token comment">// this is the default</span>
    <span class="token comment">// .WithMisfireThreshold(TimeSpan.FromSeconds(60))</span>
    <span class="token punctuation">.</span><span class="token function">UsePersistentStore</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// force job data map values to be considered as strings</span>
        <span class="token comment">// prevents nasty surprises if object is accidentally serialized and then</span>
        <span class="token comment">// serialization format breaks, defaults to false</span>
        x<span class="token punctuation">.</span>UseProperties <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        x<span class="token punctuation">.</span><span class="token function">UseClustering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// there are other SQL providers supported too</span>
        x<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span><span class="token string">&quot;my-data-source-name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my connection string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// this requires Quartz.Serialization.Newtonsoft NuGet package</span>
        x<span class="token punctuation">.</span><span class="token function">UseNewtonsoftJsonSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// job initialization plugin handles our xml reading, without it defaults are used</span>
    <span class="token comment">// requires Quartz.Plugins NuGet package</span>
    <span class="token punctuation">.</span><span class="token function">UseXmlSchedulingConfiguration</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        x<span class="token punctuation">.</span>Files <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;~/quartz_jobs.xml&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// this is the default</span>
        x<span class="token punctuation">.</span>FailOnFileNotFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">// this is not the default</span>
        x<span class="token punctuation">.</span>FailOnSchedulingError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">BuildScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configuration-files" tabindex="-1"><a class="header-anchor" href="#configuration-files"><span>Configuration files</span></a></h3><p>Following files are searched for known configuration properties:</p><ul><li><code>YourApplication.exe.config</code> configuration file using quartz-element (full .NET framework only)</li><li><code>appsettings.json</code> (.NET Core/NET5 onwards)</li><li><code>quartz.config</code> file in your application&#39;s root directory (works both with .NET Core and full .NET Framework)</li></ul><p>Full documentation of available properties is available in the <a href="configuration/reference">Quartz Configuration Reference</a>.</p><p>To get up and running quickly, a basic quartz.config looks something like this:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code> quartz.scheduler.instanceName = MyScheduler
 quartz.jobStore.type = Quartz.Simpl.RAMJobStore, Quartz
 quartz.threadPool.maxConcurrency = 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember to set the <strong>Copy to Output Directory</strong> on Visual Studio&#39;s file property pages to have value <strong>Copy always</strong>. Otherwise the config will not be seen if it&#39;s not in build directory.</p><p>The scheduler created by this configuration has the following characteristics:</p><ul><li><p><code>quartz.scheduler.instanceName</code> - This scheduler&#39;s name will be &quot;MyScheduler&quot;.</p></li><li><p><code>quartz.threadPool.maxConcurrency</code> - Maximum of 3 jobs can be run simultaneously (default is 10).</p></li><li><p><code>quartz.jobStore.type</code> - All of Quartz&#39;s data, such as details of jobs and triggers, is held in memory (rather than in a database).</p></li><li><p>Even if you have a database and want to use it with Quartz, I suggest you get Quartz working with the RamJobStore before you open up a whole new dimension by working with a database.</p></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Actually you don&#39;t need to define these properties if you don&#39;t want to, Quartz.NET comes with sane defaults</p></div><h2 id="starting-a-sample-application" tabindex="-1"><a class="header-anchor" href="#starting-a-sample-application"><span>Starting a Sample Application</span></a></h2><p>Now you&#39;ve downloaded and installed Quartz, it&#39;s time to get a sample application up and running. The following code obtains an instance of the scheduler, starts it, then shuts it down:</p><p><strong>Program.cs</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token namespace">Quartz</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Quartz<span class="token punctuation">.</span>Impl</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">QuartzSampleApp</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Grab the Scheduler instance from the Factory</span>
            <span class="token class-name">StdSchedulerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IScheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">await</span> factory<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// and start it off</span>
            <span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// some sleep to show what&#39;s happening</span>
            <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// and last shut down the scheduler when you are ready to close your program</span>
            <span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As of Quartz 3.0 your application will terminate when there&#39;s no code left to execute after <code>scheduler.Shutdown()</code>, because there won&#39;t be any active threads. You should manually block exiting of application if you want scheduler to keep running also after the Task.Delay and Shutdown has been processed.</p><p>Now running the program will not show anything. When 10 seconds have passed the program will just terminate. Lets add some logging to console.</p><h2 id="adding-logging" tabindex="-1"><a class="header-anchor" href="#adding-logging"><span>Adding logging</span></a></h2><p>When no logging is configured, Quartz will log to a NullLogger, essentially causing logging to be silent. Quartz.net supports logging providers that are compatible with the Microsoft.Logging.Abstractions library.</p><p>To configure a console logger, using the Microsoft.Logging library, construct a LoggerFactory, then set this is Quartz via the <code>LogProvider.SetLogProvider</code> method.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> loggerFactory <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>builder <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        builder
            <span class="token punctuation">.</span><span class="token function">SetMinimumLevel</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>Debug<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddSimpleConsole</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                options<span class="token punctuation">.</span>IncludeScopes <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                options<span class="token punctuation">.</span>SingleLine <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                options<span class="token punctuation">.</span>TimestampFormat <span class="token operator">=</span> <span class="token string">&quot;hh:mm:ss &quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LogProvider<span class="token punctuation">.</span><span class="token function">SetLogProvider</span><span class="token punctuation">(</span>loggerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="trying-out-the-application-and-adding-jobs" tabindex="-1"><a class="header-anchor" href="#trying-out-the-application-and-adding-jobs"><span>Trying out the application and adding jobs</span></a></h2><p>Now we should get a lot more information when we start the application.</p><div class="language-log line-numbers-mode" data-ext="log" data-title="log"><pre class="language-log"><code><span class="token punctuation">[</span><span class="token number">12.51.10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Info<span class="token punctuation">]</span> Quartz<span class="token punctuation">.</span>NET properties loaded from configuration file <span class="token string">&#39;C:\\QuartzSampleApp\\quartz.config&#39;</span>
<span class="token punctuation">[</span><span class="token number">12.51.10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Info<span class="token punctuation">]</span> <span class="token property">Initialized Scheduler Signaller of type:</span> Quartz<span class="token punctuation">.</span>Core<span class="token punctuation">.</span>SchedulerSignalerImpl
<span class="token punctuation">[</span><span class="token number">12.51.10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Info<span class="token punctuation">]</span> Quartz Scheduler created
<span class="token punctuation">[</span><span class="token number">12.51.10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Info<span class="token punctuation">]</span> RAMJobStore initialized<span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">12.51.10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Info<span class="token punctuation">]</span> <span class="token property">Scheduler meta-data:</span> Quartz Scheduler <span class="token operator">(</span><span class="token number">v3.0.0.0</span><span class="token operator">)</span> <span class="token string">&#39;MyScheduler&#39;</span> with instanceId <span class="token string">&#39;NON_CLUSTERED&#39;</span>
  <span class="token property">Scheduler class:</span> <span class="token string">&#39;Quartz.Core.QuartzScheduler&#39;</span> <span class="token operator">-</span> running locally<span class="token punctuation">.</span>
  NOT STARTED<span class="token punctuation">.</span>
  Currently in standby mode<span class="token punctuation">.</span>
  <span class="token property">Number of jobs executed:</span> <span class="token number">0</span>
  Using thread pool <span class="token string">&#39;Quartz.Simpl.DefaultThreadPool&#39;</span> <span class="token operator">-</span> with <span class="token number">3</span> threads<span class="token punctuation">.</span>
  Using job<span class="token operator">-</span>store <span class="token string">&#39;Quartz.Simpl.RAMJobStore&#39;</span> <span class="token operator">-</span> which does not support persistence<span class="token punctuation">.</span> and is not clustered<span class="token punctuation">.</span>

<span class="token punctuation">[</span><span class="token number">12.51.10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Info<span class="token punctuation">]</span> Quartz scheduler <span class="token string">&#39;MyScheduler&#39;</span> initialized
<span class="token punctuation">[</span><span class="token number">12.51.10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Info<span class="token punctuation">]</span> <span class="token property">Quartz scheduler version:</span> <span class="token ip-address constant">3.0.0.0</span>
<span class="token punctuation">[</span><span class="token number">12.51.10</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Info<span class="token punctuation">]</span> Scheduler MyScheduler_<span class="token operator">$</span>_NON_CLUSTERED started<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We need a simple test job to test the functionality, lets create HelloJob that outputs greetings to console.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJob</span></span>
<span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
  <span class="token keyword">await</span> Console<span class="token punctuation">.</span>Out<span class="token punctuation">.</span><span class="token function">WriteLineAsync</span><span class="token punctuation">(</span><span class="token string">&quot;Greetings from HelloJob!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To do something interesting, you need code just after Start() method, before the Task.Delay.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// define the job and tie it to our HelloJob class</span>
<span class="token class-name">IJobDetail</span> job <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HelloJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;job1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Trigger the job to run now, and then repeat every 10 seconds</span>
<span class="token class-name">ITrigger</span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">StartNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x
  <span class="token punctuation">.</span><span class="token function">WithIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Tell Quartz to schedule the job using our trigger</span>
<span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// You could also schedule multiple triggers for the same job with</span>
<span class="token comment">// await scheduler.ScheduleJob(job, new List&lt;ITrigger&gt;() { trigger1, trigger2 }, replace: true);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The complete console application will now look like this</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token namespace">Quartz</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Quartz<span class="token punctuation">.</span>Impl</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Quartz<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">QuartzSampleApp</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> loggerFactory <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>builder <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                builder
                    <span class="token punctuation">.</span><span class="token function">SetMinimumLevel</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>Debug<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">AddSimpleConsole</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
                    <span class="token punctuation">{</span>
                        options<span class="token punctuation">.</span>IncludeScopes <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        options<span class="token punctuation">.</span>SingleLine <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        options<span class="token punctuation">.</span>TimestampFormat <span class="token operator">=</span> <span class="token string">&quot;hh:mm:ss &quot;</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            LogProvider<span class="token punctuation">.</span><span class="token function">SetLogProvider</span><span class="token punctuation">(</span>loggerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Grab the Scheduler instance from the Factory</span>
            <span class="token class-name">StdSchedulerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">IScheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">await</span> factory<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// and start it off</span>
            <span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// define the job and tie it to our HelloJob class</span>
            <span class="token class-name">IJobDetail</span> job <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HelloJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;job1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Trigger the job to run now, and then repeat every 10 seconds</span>
            <span class="token class-name">ITrigger</span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">StartNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x
                    <span class="token punctuation">.</span><span class="token function">WithIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Tell Quartz to schedule the job using our trigger</span>
            <span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// some sleep to show what&#39;s happening</span>
            <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// and last shut down the scheduler when you are ready to close your program</span>
            <span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Press any key to close the application&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJob</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> Console<span class="token punctuation">.</span>Out<span class="token punctuation">.</span><span class="token function">WriteLineAsync</span><span class="token punctuation">(</span><span class="token string">&quot;Greetings from HelloJob!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creating-and-initializing-database" tabindex="-1"><a class="header-anchor" href="#creating-and-initializing-database"><span>Creating and initializing database</span></a></h2><p>In order to use SQL persistence storage for Quartz and enabling features like clustering, you need to create a database and initialize the schema objects using SQL scripts. First you need to create a database and credentials for Quartz. After you have a database that Quartz will be able to connect to, you also need to create database tables and indexes that Quartz needs for successful operation.</p>`,49),k={href:"https://github.com/quartznet/quartznet/tree/main/database/tables",target:"_blank",rel:"noopener noreferrer"};function m(v,g){const e=a("ExternalLinkIcon"),o=a("RouteLink");return i(),c("div",null,[d,s("p",null,[n("You can find latest DDL scripts in "),s("a",k,[n("Quartz's GitHub repository"),t(e)]),n(" and they are also contained in the ZIP archive distribution. There are also thirty party additions to Quartz that enable other types of storage, like NoSQL databases. You can search for them on NuGet.")]),s("p",null,[n("Now go have some fun exploring Quartz.NET! You can continue by reading "),t(o,{to:"/documentation/quartz-4.x/tutorial/"},{default:l(()=>[n("the tutorial")]),_:1}),n(".")])])}const h=p(r,[["render",m],["__file","quick-start.html.vue"]]),f=JSON.parse('{"path":"/documentation/quartz-4.x/quick-start.html","title":"Quartz 4 Quick Start","lang":"en-US","frontmatter":{"title":"Quartz 4 Quick Start"},"headers":[{"level":2,"title":"Download and Install","slug":"download-and-install","link":"#download-and-install","children":[]},{"level":2,"title":"NuGet Package","slug":"nuget-package","link":"#nuget-package","children":[{"level":3,"title":"Zip Archive","slug":"zip-archive","link":"#zip-archive","children":[]}]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[{"level":3,"title":"Fluent Scheduler Builder API","slug":"fluent-scheduler-builder-api","link":"#fluent-scheduler-builder-api","children":[]},{"level":3,"title":"Configuration files","slug":"configuration-files","link":"#configuration-files","children":[]}]},{"level":2,"title":"Starting a Sample Application","slug":"starting-a-sample-application","link":"#starting-a-sample-application","children":[]},{"level":2,"title":"Adding logging","slug":"adding-logging","link":"#adding-logging","children":[]},{"level":2,"title":"Trying out the application and adding jobs","slug":"trying-out-the-application-and-adding-jobs","link":"#trying-out-the-application-and-adding-jobs","children":[]},{"level":2,"title":"Creating and initializing database","slug":"creating-and-initializing-database","link":"#creating-and-initializing-database","children":[]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-4.x/quick-start.md"}');export{h as comp,f as data};
