import{_ as s,o as n,c as a,e}from"./app-Ba_ts8M_.js";const t={},c=e(`<h1 id="scheduler-listeners" tabindex="-1"><a class="header-anchor" href="#scheduler-listeners"><span>Scheduler Listeners</span></a></h1><p>SchedulerListeners are much like <code>ITriggerListener</code>s and <code>IJobListener</code>s, except they receive notification of events within the scheduler itself - not necessarily events related to a specific trigger or job.</p><p>Scheduler-related events include: the addition of a job/trigger, the removal of a job/trigger, a serious error within the scheduler, notification of the scheduler being shutdown, and others.</p><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>Make sure your scheduler listeners never throw an exception (use a try-catch) and that they can handle internal problems. Quartz can get in unpredictable state when it is unable to determine whether required logic in listener was completed successfully when listener notification failed.</p></div><p><strong>The ISchedulerListener Interface</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISchedulerListener</span>
<span class="token punctuation">{</span>
 <span class="token return-type class-name">ValueTask</span> <span class="token function">JobScheduled</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token return-type class-name">ValueTask</span> <span class="token function">JobUnscheduled</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> triggerName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token return-type class-name">ValueTask</span> <span class="token function">TriggerFinalized</span><span class="token punctuation">(</span><span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token return-type class-name">ValueTask</span> <span class="token function">TriggersPaused</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> triggerName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token return-type class-name">ValueTask</span> <span class="token function">TriggersResumed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> triggerName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> triggerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token return-type class-name">ValueTask</span> <span class="token function">JobsPaused</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> jobName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> jobGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token return-type class-name">ValueTask</span> <span class="token function">JobsResumed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> jobName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> jobGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token return-type class-name">ValueTask</span> <span class="token function">SchedulerError</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">,</span> <span class="token class-name">SchedulerException</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token return-type class-name">ValueTask</span> <span class="token function">SchedulerShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SchedulerListeners are registered with the scheduler&#39;s <code>ListenerManager</code>. SchedulerListeners can be virtually any object that implements the <code>ISchedulerListener</code> interface.</p><p><strong>Adding a SchedulerListener:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>scheduler<span class="token punctuation">.</span>ListenerManager<span class="token punctuation">.</span><span class="token function">AddSchedulerListener</span><span class="token punctuation">(</span>mySchedListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Removing a SchedulerListener:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>scheduler<span class="token punctuation">.</span>ListenerManager<span class="token punctuation">.</span><span class="token function">RemoveSchedulerListener</span><span class="token punctuation">(</span>mySchedListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),p=[c];function i(l,o){return n(),a("div",null,p)}const u=s(t,[["render",i],["__file","scheduler-listeners.html.vue"]]),d=JSON.parse('{"path":"/documentation/quartz-4.x/tutorial/scheduler-listeners.html","title":"Scheduler Listeners","lang":"en-US","frontmatter":{"title":"Scheduler Listeners"},"headers":[],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-4.x/tutorial/scheduler-listeners.md"}');export{u as comp,d as data};
