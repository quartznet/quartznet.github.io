import{_ as e,r as i,o,c as p,b as s,d as n,a as c,w as u,e as a}from"./app-Ba_ts8M_.js";const l={},r=a(`<h1 id="simple-triggers" tabindex="-1"><a class="header-anchor" href="#simple-triggers"><span>Simple Triggers</span></a></h1><p>SimpleTrigger should meet your scheduling needs if you need to have a job execute exactly once at a specific moment in time, or at a specific moment in time followed by repeats at a specific interval. Or plainer English, if you want the trigger to fire at exactly 11:23:54 AM on January 13, 2005, and then fire five more times, every ten seconds.</p><p>With this description, you may not find it surprising to find that the properties of a SimpleTrigger include: a start-time, and end-time, a repeat count, and a repeat interval. All of these properties are exactly what you&#39;d expect them to be, with only a couple special notes related to the end-time property.</p><p>The repeat count can be zero, a positive integer, or the constant value <code>SimpleTrigger.RepeatIndefinitely</code>. The repeat interval property must be <code>TimeSpan.Zero</code>, or a positive TimeSpan value. Note that a repeat interval of zero will cause &#39;repeat count&#39; firings of the trigger to happen concurrently (or as close to concurrently as the scheduler can manage).</p><p>If you&#39;re not already familiar with the <code>DateTime</code> class, you may find it helpful for computing your trigger fire-times, depending on the startTimeUtc (or endTimeUtc) that you&#39;re trying to create.</p><p>The <code>EndTimeUtc</code> property (if it is specified) over-rides the repeat count property. This can be useful if you wish to create a trigger such as one that fires every 10 seconds until a given moment in time - rather than having to compute the number of times it would repeat between the start-time and the end-time, you can simply specify the end-time and then use a repeat count of RepeatIndefinitely (you could even specify a repeat count of some huge number that is sure to be more than the number of times the trigger will actually fire before the end-time arrives).</p><p>SimpleTrigger instances are built using <code>TriggerBuilder</code> (for the trigger&#39;s main properties) and <code>WithSimpleSchedule</code> extension method (for the SimpleTrigger-specific properties).</p><p><strong>Build a trigger for a specific moment in time, with no repeats:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// trigger builder creates simple trigger by default, actually an ITrigger is returned</span>
<span class="token class-name">ISimpleTrigger</span> trigger <span class="token operator">=</span> <span class="token punctuation">(</span>ISimpleTrigger<span class="token punctuation">)</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">StartAt</span><span class="token punctuation">(</span>myStartTime<span class="token punctuation">)</span> <span class="token comment">// some Date </span>
    <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span><span class="token string">&quot;job1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span> <span class="token comment">// identify job with name, group strings</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Build a trigger for a specific moment in time, then repeating every ten seconds ten times:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">ITrigger</span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">StartAt</span><span class="token punctuation">(</span>myTimeToStartFiring<span class="token punctuation">)</span> <span class="token comment">// if a start time is not given (if this line were omitted), &quot;now&quot; is implied</span>
    <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x
        <span class="token punctuation">.</span><span class="token function">WithIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WithRepeatCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// note that 10 repeats will give a total of 11 firings</span>
    <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span>myJob<span class="token punctuation">)</span> <span class="token comment">// identify job with handle to its JobDetail itself                   </span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Build a trigger that will fire once, five minutes in the future:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">ITrigger</span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">StartAt</span><span class="token punctuation">(</span>DateBuilder<span class="token punctuation">.</span><span class="token function">FutureDate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> IntervalUnit<span class="token punctuation">.</span>Minute<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// use DateBuilder to create a date in the future</span>
    <span class="token punctuation">.</span><span class="token function">ForJob</span><span class="token punctuation">(</span>myJobKey<span class="token punctuation">)</span> <span class="token comment">// identify job with its JobKey</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Build a trigger that will fire now, then repeat every five minutes, until the hour 22:00:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">ITrigger</span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x
        <span class="token punctuation">.</span><span class="token function">WithIntervalInMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">EndAt</span><span class="token punctuation">(</span>DateBuilder<span class="token punctuation">.</span><span class="token function">DateOf</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Build a trigger that will fire at the top of the next hour, then repeat every 2 hours, forever:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">ITrigger</span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger8&quot;</span><span class="token punctuation">)</span> <span class="token comment">// because group is not specified, &quot;trigger8&quot; will be in the default group</span>
    <span class="token punctuation">.</span><span class="token function">StartAt</span><span class="token punctuation">(</span>DateBuilder<span class="token punctuation">.</span><span class="token function">EvenHourDate</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// get the next even-hour (minutes and seconds zero (&quot;00:00&quot;))</span>
    <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x
        <span class="token punctuation">.</span><span class="token function">WithIntervalInHours</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// note that in this example, &#39;forJob(..)&#39; is not called </span>
    <span class="token comment">//  - which is valid if the trigger is passed to the scheduler along with the job  </span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>trigger<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spend some time looking at all of the available methods in the language defined by <code>TriggerBuilder</code> and its extension method <code>WithSimpleSchedule</code> so that you can be familiar with options available to you that may not have been demonstrated in the examples above.</p><h2 id="simpletrigger-misfire-instructions" tabindex="-1"><a class="header-anchor" href="#simpletrigger-misfire-instructions"><span>SimpleTrigger Misfire Instructions</span></a></h2>`,19),d=s("code",null,"MisfirePolicy.SimpleTrigger",-1),g=a(`<p><strong>Misfire Instruction Constants for SimpleTrigger</strong></p><ul><li><code>MisfireInstruction.IgnoreMisfirePolicy</code></li><li><code>MisfirePolicy.SimpleTrigger.FireNow</code></li><li><code>MisfirePolicy.SimpleTrigger.RescheduleNowWithExistingRepeatCount</code></li><li><code>MisfirePolicy.SimpleTrigger.RescheduleNowWithRemainingRepeatCount</code></li><li><code>MisfirePolicy.SimpleTrigger.RescheduleNextWithRemainingCount</code></li><li><code>MisfirePolicy.SimpleTrigger.RescheduleNextWithExistingCount</code></li></ul><p>You should recall from the earlier lessons that all triggers have the <code>MisfirePolicy.SmartPolicy</code> instruction available for use, and this instruction is also the default for all trigger types.</p><p>If the &#39;smart policy&#39; instruction is used, SimpleTrigger dynamically chooses between its various MISFIRE instructions, based on the configuration and state of the given SimpleTrigger instance. The documentation for the <code>SimpleTrigger.UpdateAfterMisfire()</code> method explains the exact details of this dynamic behavior.</p><p>When building SimpleTriggers, you specify the misfire instruction as part of the simple schedule (via SimpleSchedulerBuilder):</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">ITrigger</span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x
        <span class="token punctuation">.</span><span class="token function">WithIntervalInMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WithMisfireHandlingInstructionNextWithExistingCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function m(k,h){const t=i("RouteLink");return o(),p("div",null,[r,s("p",null,[n("SimpleTrigger has several instructions that can be used to inform Quartz.NET what it should do when a misfire occurs. (Misfire situations were introduced in the "),c(t,{to:"/documentation/quartz-3.x/tutorial/more-about-triggers.html"},{default:u(()=>[n("More About Triggers")]),_:1}),n(" section of this tutorial). These instructions are defined as constants on "),d,n(" (including API documentation describing their behavior). The instructions include:")]),g])}const f=e(l,[["render",m],["__file","simpletriggers.html.vue"]]),b=JSON.parse('{"path":"/documentation/quartz-3.x/tutorial/simpletriggers.html","title":"Simple Triggers","lang":"en-US","frontmatter":{"title":"Simple Triggers"},"headers":[{"level":2,"title":"SimpleTrigger Misfire Instructions","slug":"simpletrigger-misfire-instructions","link":"#simpletrigger-misfire-instructions","children":[]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-3.x/tutorial/simpletriggers.md"}');export{f as comp,b as data};
