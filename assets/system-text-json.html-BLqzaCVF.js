import{_ as e,r as t,o as p,c as o,b as n,d as s,a as i,e as c}from"./app-Ba_ts8M_.js";const l={},u=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"TIP"),n("p",null,"JSON is recommended persistent format to store data in database for greenfield projects. You should also strongly consider setting useProperties to true to restrict key-values to be strings.")],-1),r={href:"https://www.nuget.org/packages/Quartz.Serialization.SystemTextJson",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>You need to add NuGet package reference to your project which uses Quartz.</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>    <span class="token function">Install-Package</span> Quartz<span class="token punctuation">.</span>Serialization<span class="token punctuation">.</span>SystemTextJson
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="configuring" tabindex="-1"><a class="header-anchor" href="#configuring"><span>Configuring</span></a></h2><p><strong>Classic property-based configuration</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NameValueCollection</span>
<span class="token punctuation">{</span>
 <span class="token punctuation">[</span><span class="token string">&quot;quartz.jobStore.type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Quartz.Impl.AdoJobStore.JobStoreTX, Quartz&quot;</span><span class="token punctuation">,</span>
 <span class="token punctuation">[</span><span class="token string">&quot;quartz.serializer.type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;stj&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">ISchedulerFactory</span> schedulerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StdSchedulerFactory</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Configuring using scheduler builder</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> SchedulerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span><span class="token function">UsePersistentStore</span><span class="token punctuation">(</span>store <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// it&#39;s generally recommended to stick with</span>
    <span class="token comment">// string property keys and values when serializing</span>
    store<span class="token punctuation">.</span>UseProperties <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    store<span class="token punctuation">.</span><span class="token function">UseGenericDatabase</span><span class="token punctuation">(</span>dbProvider<span class="token punctuation">,</span> db <span class="token operator">=&gt;</span>
        db<span class="token punctuation">.</span>ConnectionString <span class="token operator">=</span> <span class="token string">&quot;my connection string&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    store<span class="token punctuation">.</span><span class="token function">UseSystemTextJsonSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ISchedulerFactory</span> schedulerFactory <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="migrating-from-binary-serialization" tabindex="-1"><a class="header-anchor" href="#migrating-from-binary-serialization"><span>Migrating from binary serialization</span></a></h2><p>There&#39;s now official solution for migration as there can be quirks in every setup, but there&#39;s a recipe that can work for you.</p><ul><li>Configure custom serializer like <code>MigratorSerializer</code> below that can read binary serialization format and writes JSON format</li><li>Either let system gradually migrate as it&#39;s running or create a program which loads and writes back to DB all relevant serialized assets</li></ul><p><strong>Example hybrid serializer</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Json</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token namespace">Quartz<span class="token punctuation">.</span>Simpl</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Quartz<span class="token punctuation">.</span>Spi</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Quartz</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">MigratorSerializer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IObjectSerializer</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">BinaryObjectSerializer</span> binarySerializer<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SystemTextJsonObjectSerializer</span> jsonSerializer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MigratorSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        binarySerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BinaryObjectSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// you might need custom configuration, see sections about customizing</span>
        <span class="token comment">// in documentation</span>
        jsonSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SystemTextJsonObjectSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">DeSerialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> data<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Attempt to deserialize data as JSON</span>
            <span class="token keyword">return</span> jsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeSerialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonException</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Presumably, the data was not JSON, we instead use the binary serializer</span>
            <span class="token class-name"><span class="token keyword">var</span></span> binaryData <span class="token operator">=</span> binarySerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeSerialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>binaryData <span class="token keyword">is</span> <span class="token class-name">JobDataMap</span> jobDataMap<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// make sure we mark the map as dirty so it will be serialized as JSON next time</span>
                jobDataMap<span class="token punctuation">[</span>SchedulerConstants<span class="token punctuation">.</span>ForceJobDataMapDirty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> binaryData<span class="token operator">!</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        binarySerializer<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonSerializer<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token generic-method"><span class="token function">Serialize</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> jsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="customizing-serialization-options" tabindex="-1"><a class="header-anchor" href="#customizing-serialization-options"><span>Customizing serialization options</span></a></h2><p>If you need to customize serialization, you need to inherit custom implementation and override <code>CreateSerializerOptions</code>.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">CustomJsonSerializer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SystemTextJsonObjectSerializer</span></span>
<span class="token punctuation">{</span>
   <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">JsonSerializerOptions</span> <span class="token function">CreateSerializerOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       <span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">CreateSerializerOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       options<span class="token punctuation">.</span>Converters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyCustomConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> options<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>And then configure it to use</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>store<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseSerializer</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomJsonSerializer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or</span>
<span class="token string">&quot;quartz.serializer.type&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;MyProject.CustomJsonSerializer, MyProject&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="customizing-calendar-serialization" tabindex="-1"><a class="header-anchor" href="#customizing-calendar-serialization"><span>Customizing calendar serialization</span></a></h2><p>If you have implemented a custom calendar, you need to implement a <code>ICalendarSerializer</code> for it. There&#39;s a convenience base class <code>CalendarSerializer</code> that you can use the get strongly-typed experience.</p><p><strong>Custom calendar and serializer</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>Serialization</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Json</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token namespace">Quartz<span class="token punctuation">.</span>Impl<span class="token punctuation">.</span>Calendar</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Quartz<span class="token punctuation">.</span>Serialization<span class="token punctuation">.</span>SystemTextJson</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">CustomCalendar</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseCalendar</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">CustomCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// binary serialization support</span>
    <span class="token keyword">private</span> <span class="token function">CustomCalendar</span><span class="token punctuation">(</span><span class="token class-name">SerializationInfo</span> info<span class="token punctuation">,</span> <span class="token class-name">StreamingContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        SomeCustomProperty <span class="token operator">=</span> info<span class="token punctuation">?.</span><span class="token function">GetBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;SomeCustomProperty&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> SomeCustomProperty <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment">// binary serialization support</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetObjectData</span><span class="token punctuation">(</span><span class="token class-name">SerializationInfo</span> info<span class="token punctuation">,</span> <span class="token class-name">StreamingContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">GetObjectData</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        info<span class="token punctuation">?.</span><span class="token function">AddValue</span><span class="token punctuation">(</span><span class="token string">&quot;SomeCustomProperty&quot;</span><span class="token punctuation">,</span> SomeCustomProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// JSON serialization support</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">CustomCalendarSerializer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">CalendarSerializer<span class="token punctuation">&lt;</span>CustomCalendar<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">CustomCalendar</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token class-name">JsonElement</span> jsonElement<span class="token punctuation">,</span> <span class="token class-name">JsonSerializerOptions</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SerializeFields</span><span class="token punctuation">(</span><span class="token class-name">Utf8JsonWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">CustomCalendar</span> calendar<span class="token punctuation">,</span> <span class="token class-name">JsonSerializerOptions</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        writer<span class="token punctuation">.</span><span class="token function">WriteBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;SomeCustomProperty&quot;</span><span class="token punctuation">,</span> calendar<span class="token punctuation">.</span>SomeCustomProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DeserializeFields</span><span class="token punctuation">(</span><span class="token class-name">CustomCalendar</span> calendar<span class="token punctuation">,</span> <span class="token class-name">JsonElement</span> jsonElement<span class="token punctuation">,</span> <span class="token class-name">JsonSerializerOptions</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        calendar<span class="token punctuation">.</span>SomeCustomProperty <span class="token operator">=</span> jsonElement<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;CustomProperty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CalendarTypeName <span class="token operator">=&gt;</span> <span class="token string">&quot;CustomCalendar&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Configuring custom calendar serializer</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> SchedulerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span><span class="token function">UsePersistentStore</span><span class="token punctuation">(</span>store <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    store<span class="token punctuation">.</span><span class="token function">UseSystemTextJsonSerializer</span><span class="token punctuation">(</span>json <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        json<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddCalendarSerializer</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomCalendar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomCalendarSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or just globally which is what above code calls</span>
SystemTextJsonObjectSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddCalendarSerializer</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomCalendar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomCalendarSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function k(m,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[s("Quartz.Serialization.SystemTextJson"),i(a)]),s(" provides JSON serialization support for job stores using System.Text.Json facilities to handle the actual serialization process.")]),d])}const y=e(l,[["render",k],["__file","system-text-json.html.vue"]]),g=JSON.parse('{"path":"/documentation/quartz-3.x/packages/system-text-json.html","title":"Serialization (System.Text.Json)","lang":"en-US","frontmatter":{"title":"Serialization (System.Text.Json)"},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"Configuring","slug":"configuring","link":"#configuring","children":[]},{"level":2,"title":"Migrating from binary serialization","slug":"migrating-from-binary-serialization","link":"#migrating-from-binary-serialization","children":[]},{"level":2,"title":"Customizing serialization options","slug":"customizing-serialization-options","link":"#customizing-serialization-options","children":[]},{"level":2,"title":"Customizing calendar serialization","slug":"customizing-calendar-serialization","link":"#customizing-calendar-serialization","children":[]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-3.x/packages/system-text-json.md"}');export{y as comp,g as data};
