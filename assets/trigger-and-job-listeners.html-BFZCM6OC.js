import{_ as n,o as s,c as a,e}from"./app-Ba_ts8M_.js";const t={},o=e(`<p>Listeners are objects that you create to perform actions based on events occurring within the scheduler. As you can probably guess, TriggerListeners receive events related to triggers, and JobListeners receive events related to jobs.</p><p>Trigger-related events include: trigger firings, trigger mis-firings (discussed in the &quot;Triggers&quot; section of this document), and trigger completions (the jobs fired off by the trigger is finished).</p><p><strong>The ITriggerListener Interface</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITriggerListener</span>
<span class="token punctuation">{</span>
  <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  
  <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TriggerFired</span><span class="token punctuation">(</span><span class="token class-name">ITrigger</span> trigger<span class="token punctuation">,</span> <span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">VetoJobExecution</span><span class="token punctuation">(</span><span class="token class-name">ITrigger</span> trigger<span class="token punctuation">,</span> <span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TriggerMisfired</span><span class="token punctuation">(</span><span class="token class-name">ITrigger</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TriggerComplete</span><span class="token punctuation">(</span><span class="token class-name">ITrigger</span> trigger<span class="token punctuation">,</span> <span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> triggerInstructionCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Job-related events include: a notification that the job is about to be executed, and a notification when the job has completed execution.</p><p><strong>The IJobListener Interface</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IJobListener</span>
<span class="token punctuation">{</span>
 <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

 <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">JobToBeExecuted</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">JobExecutionVetoed</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">JobWasExecuted</span><span class="token punctuation">(</span><span class="token class-name">IJobExecutionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">JobExecutionException</span> jobException<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-your-own-listeners" tabindex="-1"><a class="header-anchor" href="#using-your-own-listeners"><span>Using Your Own Listeners</span></a></h2><p>To create a listener, simply create an object the implements either the ITriggerListener and/or IJobListener interface. Listeners are then registered with the scheduler during run time, and must be given a name (or rather, they must advertise their own name via their Name property.</p><p>For your convenience, rather than implementing those interfaces, your class could also extend the class JobListenerSupport or TriggerListenerSupport and simply override the events you&#39;re interested in.</p><p>Listeners are registered with the scheduler&#39;s ListenerManager along with a Matcher that describes which Jobs/Triggers the listener wants to receive events for.</p><p><em>Listeners are registered with the scheduler during run time, and are NOT stored in the JobStore along with the jobs and triggers. This is because listeners are typically an integration point with your application. Hence, each time your application runs, the listeners need to be re-registered with the scheduler.</em></p><p><strong>Adding a JobListener that is interested in a particular job:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>scheduler<span class="token punctuation">.</span>ListenerManager<span class="token punctuation">.</span><span class="token function">AddJobListener</span><span class="token punctuation">(</span>myJobListener<span class="token punctuation">,</span> KeyMatcher<span class="token operator">&lt;</span>JobKey<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">KeyEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JobKey</span><span class="token punctuation">(</span><span class="token string">&quot;myJobName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myJobGroup&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Adding a JobListener that is interested in all jobs of a particular group:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>scheduler<span class="token punctuation">.</span>ListenerManager<span class="token punctuation">.</span><span class="token function">AddJobListener</span><span class="token punctuation">(</span>myJobListener<span class="token punctuation">,</span> GroupMatcher<span class="token operator">&lt;</span>JobKey<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">GroupEquals</span><span class="token punctuation">(</span><span class="token string">&quot;myJobGroup&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Adding a JobListener that is interested in all jobs of two particular groups:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>scheduler<span class="token punctuation">.</span>ListenerManager<span class="token punctuation">.</span><span class="token function">AddJobListener</span><span class="token punctuation">(</span>myJobListener<span class="token punctuation">,</span>
 OrMatcher<span class="token operator">&lt;</span>JobKey<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>GroupMatcher<span class="token operator">&lt;</span>JobKey<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">GroupEquals</span><span class="token punctuation">(</span><span class="token string">&quot;myJobGroup&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GroupMatcher<span class="token operator">&lt;</span>JobKey<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">GroupEquals</span><span class="token punctuation">(</span><span class="token string">&quot;yourGroup&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Adding a JobListener that is interested in all jobs:</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>scheduler<span class="token punctuation">.</span>ListenerManager<span class="token punctuation">.</span><span class="token function">AddJobListener</span><span class="token punctuation">(</span>myJobListener<span class="token punctuation">,</span> GroupMatcher<span class="token operator">&lt;</span>JobKey<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">AnyGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Listeners are not used by most users of Quartz.NET, but are handy when application requirements create the need for the notification of events, without the Job itself explicitly notifying the application.</p>`,21),p=[o];function i(c,r){return s(),a("div",null,p)}const u=n(t,[["render",i],["__file","trigger-and-job-listeners.html.vue"]]),d=JSON.parse('{"path":"/documentation/quartz-2.x/tutorial/trigger-and-job-listeners.html","title":"Lesson 7: TriggerListeners and JobListeners","lang":"en-US","frontmatter":{"title":"Lesson 7: TriggerListeners and JobListeners"},"headers":[{"level":2,"title":"Using Your Own Listeners","slug":"using-your-own-listeners","link":"#using-your-own-listeners","children":[]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-2.x/tutorial/trigger-and-job-listeners.md"}');export{u as comp,d as data};
