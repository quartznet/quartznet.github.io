import{_ as a,r as t,o as e,c as o,b as c,d as n,a as p,w as i,e as u}from"./app-Ba_ts8M_.js";const l={},r=u(`<p>Before you can use the scheduler, it needs to be instantiated (who&#39;d have guessed?). To do this, you use an implementor of ISchedulerFactory.</p><p>Once a scheduler is instantiated, it can be started, placed in stand-by mode, and shutdown. Note that once a scheduler is shutdown, it cannot be restarted without being re-instantiated. Triggers do not fire (jobs do not execute) until the scheduler has been started, nor while it is in the paused state.</p><p>Here&#39;s a quick snippet of code, that instantiates and starts a scheduler, and schedules a job for execution:</p><p><strong>Using Quartz.NET</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token comment">// construct a scheduler factory</span>
    <span class="token class-name">ISchedulerFactory</span> schedFact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// get a scheduler</span>
    <span class="token class-name">IScheduler</span> sched <span class="token operator">=</span> schedFact<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sched<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
 <span class="token comment">// define the job and tie it to our HelloJob class</span>
 <span class="token class-name">IJobDetail</span> job <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HelloJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;myJob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// Trigger the job to run now, and then every 40 seconds</span>
 <span class="token class-name">ITrigger</span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;myTrigger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">StartNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x
          <span class="token punctuation">.</span><span class="token function">WithIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
    sched<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function d(k,m){const s=t("RouteLink");return e(),o("div",null,[r,c("p",null,[n("As you can see, working with Quartz.NET is rather simple. In "),p(s,{to:"/documentation/quartz-2.x/tutorial/jobs-and-triggers.html"},{default:i(()=>[n("Lesson 2")]),_:1}),n(" we'll give a quick overview of Jobs and Triggers, so that you can more fully understand this example.")])])}const h=a(l,[["render",d],["__file","using-quartz.html.vue"]]),g=JSON.parse('{"path":"/documentation/quartz-2.x/tutorial/using-quartz.html","title":"Lesson 1: Using Quartz","lang":"en-US","frontmatter":{"title":"Lesson 1: Using Quartz"},"headers":[],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-2.x/tutorial/using-quartz.md"}');export{h as comp,g as data};
