import{_ as t,r as e,o as p,c as o,b as c,d as n,a as i,w as l,e as s}from"./app-Ba_ts8M_.js";const u={},r=s(`<p>Before you can use the scheduler, it needs to be instantiated (who&#39;d have guessed?). To do this, you use an implementor of ISchedulerFactory.</p><p>Once a scheduler is instantiated, it can be started, placed in stand-by mode, and shutdown. Note that once a scheduler is shutdown, it cannot be restarted without being re-instantiated. Triggers do not fire (jobs do not execute) until the scheduler has been started, nor while it is in the paused state.</p><p>Here&#39;s a quick snippet of code, that instantiates and starts a scheduler, and schedules a job for execution:</p><h3 id="install-quartz-net-nugets" tabindex="-1"><a class="header-anchor" href="#install-quartz-net-nugets"><span>Install Quartz.NET NuGets</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Install-Package Microsoft.Extensions.Hosting
Install-Package Quartz
Install-Package Quartz.Extensions.DependencyInjection
Install-Package Quartz.Extensions.Hosting
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configure-program-cs" tabindex="-1"><a class="header-anchor" href="#configure-program-cs"><span>Configure <code>Program.cs</code></span></a></h3><p>A minimal style example of configuring Quartz.NET with the Microsoft Hosting framework looks like this.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Quartz</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cxt<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        services<span class="token punctuation">.</span><span class="token function">AddQuartz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        services<span class="token punctuation">.</span><span class="token function">AddQuartzHostedService</span><span class="token punctuation">(</span>opt <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            opt<span class="token punctuation">.</span>WaitForJobsToComplete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// will block until the last running job completes</span>
<span class="token keyword">await</span> builder<span class="token punctuation">.</span><span class="token function">RunAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s add a job to this.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Quartz</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cxt<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        services<span class="token punctuation">.</span><span class="token function">AddQuartz</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            q<span class="token punctuation">.</span><span class="token function">UseMicrosoftDependencyInjectionJobFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        services<span class="token punctuation">.</span><span class="token function">AddQuartzHostedService</span><span class="token punctuation">(</span>opt <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            opt<span class="token punctuation">.</span>WaitForJobsToComplete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> schedulerFactory <span class="token operator">=</span> builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ISchedulerFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> scheduler <span class="token operator">=</span> <span class="token keyword">await</span> schedulerFactory<span class="token punctuation">.</span><span class="token function">GetScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// define the job and tie it to our HelloJob class</span>
<span class="token class-name"><span class="token keyword">var</span></span> job <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HelloJob<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;myJob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Trigger the job to run now, and then every 40 seconds</span>
<span class="token class-name"><span class="token keyword">var</span></span> trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;myTrigger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">StartNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WithSimpleSchedule</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x
        <span class="token punctuation">.</span><span class="token function">WithIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">RepeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> scheduler<span class="token punctuation">.</span><span class="token function">ScheduleJob</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// will block until the last running job completes</span>
<span class="token keyword">await</span> builder<span class="token punctuation">.</span><span class="token function">RunAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),d=s(`<h2 id="traditional-program-cs" tabindex="-1"><a class="header-anchor" href="#traditional-program-cs"><span>Traditional Program.cs</span></a></h2><p>If you are working in a pre-minimal API project, you can use the same old <code>Program.cs</code> structure as well.</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Quartz</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Example</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cxt<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                services<span class="token punctuation">.</span><span class="token function">AddQuartz</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    q<span class="token punctuation">.</span><span class="token function">UseMicrosoftDependencyInjectionJobFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                services<span class="token punctuation">.</span><span class="token function">AddQuartzHostedService</span><span class="token punctuation">(</span>opt <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    opt<span class="token punctuation">.</span>WaitForJobsToComplete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// will block until the last running job completes</span>
        <span class="token keyword">await</span> builder<span class="token punctuation">.</span><span class="token function">RunAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function k(v,m){const a=e("RouteLink");return p(),o("div",null,[r,c("p",null,[n("As you can see, working with Quartz.NET is rather simple. In "),i(a,{to:"/documentation/quartz-3.x/tutorial/jobs-and-triggers.html"},{default:l(()=>[n("Lesson 2")]),_:1}),n(" we'll give a quick overview of Jobs and Triggers, so that you can more fully understand this example.")]),d])}const g=t(u,[["render",k],["__file","using-quartz.html.vue"]]),h=JSON.parse('{"path":"/documentation/quartz-3.x/tutorial/using-quartz.html","title":"Using Quartz","lang":"en-US","frontmatter":{"title":"Using Quartz"},"headers":[{"level":3,"title":"Install Quartz.NET NuGets","slug":"install-quartz-net-nugets","link":"#install-quartz-net-nugets","children":[]},{"level":3,"title":"Configure Program.cs","slug":"configure-program-cs","link":"#configure-program-cs","children":[]},{"level":2,"title":"Traditional Program.cs","slug":"traditional-program-cs","link":"#traditional-program-cs","children":[]}],"git":{"updatedTime":1735723320000,"contributors":[{"name":"JT","email":"975824+Hawxy@users.noreply.github.com","commits":1}]},"filePathRelative":"documentation/quartz-3.x/tutorial/using-quartz.md"}');export{g as comp,h as data};
